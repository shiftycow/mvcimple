#!/usr/bin/perl
use strict;
#
#
# This is a sample configuration file for the `mvcimple` MCV Framework Generator. 
#
# This configuration defines a simple inventory-control database
# that allows multiple users to check in items, check them out again, and
# view reports. 
#

use XML::Dumper;

# include local controllers for generation
use lib "../controller";
use GenSQL;

##
## [Models]
## 
## This section defines the different data "objects" that the database 
## will store. Models contain data elements, which in turn contain 
## various attributes that affect how they are stored in the database,
## how their controllers behave and what the default views will be 
##
## The following attirbutes can be used to specify keys for each model:
##   "PRIMARY_KEY" => "yes"
##   "UNIQUE" => "yes"
##   "FOREIGN" => "<model>.<member>"
##
##  An example of a FOREIGN _KEY is:
##  "entered_by" => {"FOREIGN_KEY" => "user.username"}
##
##  Notice that FOREIGN_KEYS don't need to have "type" or "length" attributes, 
##  these can be automatically generated based on the referenced table
##

my $item = {"manufaturer_part_number" => {"type" => "string", "length" => 64},
         "upc" => {"type" => "string", "length" => 12},
         "vendor_part_number" => {"type" => "string", "length" => 64},
         "property_tag" => {"type" => "string", "length" => 64},
         "location"  => {"type" => "string", "length" => 128},
         "description" => {"type" => "string", "length" => 256},
         "id" => {"type" => "number","PRIMARY_KEY"=>"yes"},
         "entered_by" => {"FOREIGN_KEY" => "user.username"}
        };

my $user = {"fname" => {"type" => "string", "length" => 64},
         "lname" => {"type" => "string", "length" => 64},
         "username" => {"type" => "string", "length" => 64, "PRIMARY_KEY"=>"yes"},
         "password" => {"type" => "password", "length" => 64},
         "email" => {"type" => "password", "length" => 128}
        };

## models need to be packed into this hash at the end
my $models = {"item"=>$item, "user"=>$user};

#print XML::Dumper::pl2xml($models->{"user"}->{"email"});
GenSQL::generate_sql($models);

## 
## [Controllers]
##
## This section defines "controllers," which provide an interface between the user
## and the database. When a user makes a request for data, a Controller retrieves 
## the data from the database and uses a View to format it for display. In the other
## direction, a Controller takes data from the user, validates it, and updates the 
## database accordingly.
## 
## A default set of controllers is generated from each model, but custom ones can be 
## added here and skeleton frameworks will be generated from it. 
##
my $email_users = {"parameters" => ""};

##
## [Views]
##
## This section defines "views," which display data output by the controllers for the user.
## There are some views that are generated by default (listings, add/remove pages, etc)
## so this section is more of a place to define custom views. An example of a "custom"
## view would be a web page that has a form that displays multiple models.
##
## A default set of views is generated for each controller.
##
